{"version":3,"sources":["AppLab.png","Screens/Home.js","Screens/CheckIn.js","Screens/CheckOut.js","Screens/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","home","class","src","logo","className","alt","to","type","CheckIn","name","pid","reason","today","Date","item","PID","date","getFullYear","getMonth","getDate","timeIn","getHours","getMinutes","timeOut","checkedIn","staff","axios","post","this","props","history","push","id","value","onClick","SubmitCheckIn","document","getElementById","React","Component","CheckOut","state","visitors","submit","obj","confirmAlert","customUI","onClose","checkOut","get","then","res","arr","data","filter","elem","setState","getVisitors","time","put","map","index","key","Navigation","App","path","component","Home","exact","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,oC,4NCmC5BC,EA1BF,WACT,OACI,6BACI,yBAAKC,MAAM,OACP,yBAAKA,MAAM,UACP,gDACA,yBAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,UAE7C,yBAAKJ,MAAM,UACP,kBAAC,IAAD,CAASK,GAAG,aACR,4BAAQC,KAAK,SAASN,MAAM,QAA5B,aAIJ,6BACA,kBAAC,IAAD,CAASK,GAAG,cACZ,4BAAQC,KAAK,SAASN,MAAM,QAA5B,kB,iBCrBCO,E,sLAELC,EAAMC,EAAKC,GACvB,IAAIC,EAAQ,IAAIC,KAIVC,EAAO,CACXL,KAAMA,EACNM,IAAKL,EACLM,KANSJ,EAAMK,cAAgB,KAAOL,EAAMM,WAAa,GAAK,IAAMN,EAAMO,UAO1EC,OANSR,EAAMS,WAAa,IAAMT,EAAMU,aAOxCC,QAAS,QACTZ,OAAQA,EACRa,WAAW,EACXC,MAAO,IAKTC,IAAMC,KAAK,sCAAuCb,GAIlDc,KAAKC,MAAMC,QAAQC,KAAK,M,+BAGhB,IAAD,OACP,OACE,yBAAK9B,MAAM,WACT,wCACA,8BACE,yBAAKA,MAAM,WACT,uCAEM,2BAAOM,KAAK,OAAOE,KAAK,OAAOuB,GAAG,WAG1C,yBAAK/B,MAAM,WACT,sCAEM,2BAAOM,KAAK,OAAOE,KAAK,MAAMuB,GAAG,SAEvC,kEAEF,yBAAK/B,MAAM,WACT,yCAEM,2BAAOM,KAAK,OAAOE,KAAK,SAASuB,GAAG,aAG5C,2BAAO/B,MAAM,SAASM,KAAK,SAAS0B,MAAM,SACxCC,QAAS,WAAQ,EAAKC,cAAcC,SAASC,eAAe,QAAQJ,MAAOG,SAASC,eAAe,OAAOJ,MAAOG,SAASC,eAAe,UAAUJ,gB,GApD1HK,IAAMC,W,QCGtBC,G,iNAEjBC,MAAQ,CAAEC,SAAU,I,EAgBpBC,OAAS,SAACC,GACNC,uBAAa,CACTC,SAAU,YAAkB,IAAfC,EAAc,EAAdA,QACX,OACE,yBAAK3C,UAAU,YAAYH,MAAM,aAC/B,mEACA,4BAAQA,MAAM,SAASiC,QAAS,WAAO,EAAKc,SAASJ,GAAMG,MAA3D,OAGA,4BAAQ9C,MAAM,SAASiC,QAASa,GAAhC,W,6EAvBC,IAAD,OACVrB,IAAMuB,IAAI,uCAELC,MAAK,SAAAC,GACF,IAAIC,EAAMD,EAAIE,KAAKC,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAK/B,aACvC,EAAKgC,SAAS,CAAEd,SAAUU,S,0CAKlCxB,KAAK6B,gB,+BAoBAb,GAGL,IAAIhC,EAAQ,IAAIC,KACZ6C,EAAO9C,EAAMS,WAAa,IAAMT,EAAMU,aAEpCR,EAAO,CACTL,KAAMmC,EAAInC,KACVM,IAAK6B,EAAI7B,IACTC,KAAM4B,EAAI5B,KACVI,OAAQwB,EAAIxB,OACZG,QAASmC,EACT/C,OAAQiC,EAAIjC,OACZa,WAAW,EACXC,MAAOmB,EAAInB,OAGfC,IAAMiC,IAAN,6CAAgDf,EAAIZ,GAApD,KAA2DlB,GAI3Dc,KAAKC,MAAMC,QAAQC,KAAK,M,+BAGlB,IAAD,OACCW,EAAad,KAAKa,MAAlBC,SAEN,OACI,yBAAKzC,MAAM,YACP,yCACA,4DACA,6BACI,iCACKyC,EAASkB,KAAI,SAACP,EAAMQ,GAAP,OACV,4BAAQC,IAAKD,EAAO3B,QAAS,kBAAM,EAAKS,OAAOU,KAC3C,2BAAIA,EAAK5C,MACT,2BAAI4C,EAAKtC,gB,GAtEHuB,IAAMC,YCO7BwB,EARI,WACf,OACG,6BACG,kBAAC,IAAD,CAASzD,GAAG,KAAZ,UCgBK0D,E,iLAfX,OACG,kBAAC,IAAD,KACC,6BACE,kBAAC,EAAD,MACE,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWC,EAAMC,OAAK,IACtC,kBAAC,IAAD,CAAOH,KAAK,YAAYC,UAAW1D,IACnC,kBAAC,IAAD,CAAOyD,KAAK,aAAaC,UAAW1B,W,GAT/BD,aCIE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvC,SAASC,eAAe,SD2H3C,kBAAmBuC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.30a7bd8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AppLab.55f63b92.png\";","import React from 'react';\nimport logo from '../AppLab.png';\nimport { NavLink } from 'react-router-dom';\nimport '../App.css';\n\n\n\n\n\nconst home = () => {\n    return (\n        <div>\n            <div class=\"row\">\n                <div class=\"column\">\n                    <h1>  Welcome to the</h1>\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </div>\n                <div class=\"column\">\n                    <NavLink to=\"/check-in\">\n                        <button type=\"button\" class=\"home\">\n                            Check In\n                        </button>\n                    </NavLink>\n                    <br></br>\n                    <NavLink to=\"/check-out\">\n                    <button type=\"button\" class=\"home\">\n                            Check Out\n                        </button>\n                    </NavLink>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default home;","import React from 'react';\nimport axios from \"axios\";\nimport '../App.css';\n\nexport default class CheckIn extends React.Component {\n\n  SubmitCheckIn(name, pid, reason) {\n    var today = new Date();\n    var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n    var time = today.getHours() + \":\" + today.getMinutes();\n  \n    const item = {\n      name: name, // add name input field, make blank=false\n      PID: pid,\n      date: date,\n      timeIn: time,\n      timeOut: '00:00', // leave empty\n      reason: reason,\n      checkedIn: true,\n      staff: \"\"\n    };\n  \n    // add asterisk to anything required\n  \n    axios.post('http://127.0.0.1:8000/api/checkins/', item)\n    //axios.post('https://app-lab-check-in.herokuapp.com/api/checkins/', item)\n  \n    // navigate back to home\n    this.props.history.push('');\n  }\n\n  render() {\n    return (\n      <div class=\"checkin\">\n        <h2>Check In</h2>\n        <form>\n          <div class=\"textbox\">\n            <label>\n              Name:\n                  <input type=\"text\" name=\"name\" id=\"name\" />\n            </label>\n          </div>\n          <div class=\"textbox\">\n            <label>\n              PID:\n                  <input type=\"text\" name=\"pid\" id=\"pid\" />\n            </label>\n            <p>(Scanner can be used to input PID)</p>\n          </div>\n          <div class=\"textbox\">\n            <label>\n              Reason:\n                  <input type=\"text\" name=\"reason\" id=\"reason\" />\n            </label>\n          </div>\n          <input class=\"submit\" type=\"submit\" value=\"Submit\"\n            onClick={() => { this.SubmitCheckIn(document.getElementById(\"name\").value, document.getElementById(\"pid\").value, document.getElementById(\"reason\").value) }} />\n        </form>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport axios from \"axios\";\nimport '../App.css';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\n\nexport default class CheckOut extends React.Component {\n\n    state = { visitors: [] };\n\n    getVisitors() {\n        axios.get('http://127.0.0.1:8000/api/checkins/')\n        //axios.get('https://app-lab-check-in.herokuapp.com/api/checkins/')\n            .then(res => {\n                let arr = res.data.filter(elem => elem.checkedIn === true)\n                this.setState({ visitors: arr });\n            })\n    }\n\n    componentDidMount() {\n        this.getVisitors();\n    }\n\n\n    submit = (obj) => {\n        confirmAlert({\n            customUI: ({ onClose }) => {\n              return (\n                <div className='custom-ui' class=\"dialogdiv\">\n                  <h1>Are you sure you want to check out?</h1>\n                  <button class=\"dialog\" onClick={() => {this.checkOut(obj); onClose();}}>\n                    Yes\n                  </button>\n                  <button class=\"dialog\" onClick={onClose}>No</button>\n                </div>\n              );\n            }\n          });\n      };\n\n    checkOut(obj) {\n        \n        // if clicked => mark checkedIn as false and set timeOut to current time\n        var today = new Date();\n        var time = today.getHours() + \":\" + today.getMinutes();\n\n        const item = {\n            name: obj.name,\n            PID: obj.PID,\n            date: obj.date,\n            timeIn: obj.timeIn,\n            timeOut: time,\n            reason: obj.reason,\n            checkedIn: false,\n            staff: obj.staff\n        };\n\n        axios.put(`http://127.0.0.1:8000/api/checkins/${obj.id}/`, item)\n        //axios.put(`https://app-lab-check-in.herokuapp.com/${obj.id}/`, item)\n\n        // navigate back to home\n        this.props.history.push('');\n    }\n\n    render() {\n        let { visitors } = this.state;\n\n        return (\n            <div class=\"checkout\">\n                <h2>Check Out</h2>\n                <p>Select your name to check out</p>\n                <div>\n                    <section>\n                        {visitors.map((data, index) => (\n                            <button key={index} onClick={() => this.submit(data)}>\n                                <p>{data.name}</p>\n                                <p>{data.PID}</p>\n                            </button>\n                        ))}\n                    </section>\n                </div>\n            </div >\n        );\n    }\n}","import React from 'react';\nimport '../App.css';\n\n \nimport { NavLink } from 'react-router-dom';\n \nconst Navigation = () => {\n    return (\n       <div>\n          <NavLink to=\"/\">Home</NavLink>\n       </div>\n    );\n}\n \nexport default Navigation;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './Screens/Home';\nimport CheckIn from './Screens/CheckIn';\nimport CheckOut from './Screens/CheckOut';\nimport Navigation from './Screens/Navigation';\n\nclass App extends Component {\n  render() {\n    return (      \n       <BrowserRouter>\n        <div>\n          <Navigation />\n            <Switch>\n             <Route path=\"/\" component={Home} exact/>\n             <Route path=\"/check-in\" component={CheckIn}/>\n             <Route path=\"/check-out\" component={CheckOut}/>\n           </Switch>\n        </div> \n      </BrowserRouter>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}