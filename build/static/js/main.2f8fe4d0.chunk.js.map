{"version":3,"sources":["AppLab.png","Screens/Home.js","Screens/CheckIn.js","Screens/CheckOut.js","Screens/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","home","class","src","logo","alt","to","type","options","getSuggestions","value","trim","length","escapedValue","replace","regex","RegExp","filter","option","test","getSuggestionValue","suggestion","renderSuggestion","shouldRenderSuggestions","reason","CheckIn","onChange","event","newValue","method","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","isChecked","firstTime","handleChecked","bind","handleFirstTimeChecked","name","pid","noPID","firstVisit","hear","alert","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","axios","url","headers","authorization","localStorage","token","data","PID","timeIn","timeOut","staff","checkedIn","hasPID","heard_about_al_through","this","props","history","push","inputProps","onSubmit","SubmitCheckIn","document","getElementById","checked","id","disabled","for","style","display","React","Component","CheckOut","visitors","submit","obj","confirmAlert","customUI","onClose","className","onClick","checkOut","get","then","res","arr","elem","getVisitors","map","index","key","Navigation","App","path","component","Home","exact","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f8fe4d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AppLab.55f63b92.png\";","import React from 'react';\r\nimport logo from '../AppLab.png';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\nconst home = () => {\r\n    return (\r\n        <div class=\"container\">\r\n                <div class=\"column\">\r\n                    <h1>  Welcome to the</h1>\r\n                    <img src={logo} class=\"App-logo\" alt=\"logo\" />\r\n                </div>\r\n                <div class=\"column\">\r\n                    <NavLink to=\"/check-in\">\r\n                        <button class=\"home\" type=\"button\">\r\n                            Check In\r\n                        </button>\r\n                    </NavLink>\r\n                    <br></br>\r\n                    <NavLink to=\"/check-out\">\r\n                    <button class=\"home\" type=\"button\">\r\n                            Check Out\r\n                        </button>\r\n                    </NavLink>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default home;","import React from 'react';\r\nimport axios from \"axios\";\r\nimport '../App.css';\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\nconst options = \r\n['Flyer', 'Poster', 'Sign in CS Building',\r\n'Friend', 'Word of Mouth', \r\n'Class Announcement', 'Email (Class)',\r\n'Club Announcement', 'Email (Club)', 'Newsletter (Club)', 'WICS',\r\n'Email (Department)', 'CS Newsletter', 'Newsletter (Department)', 'Department Announcement',\r\n'Facebook', 'Instagram', 'Discord', 'Slack', 'App Lab Slack', \r\n'Website', 'App Lab Website', 'Web Search', 'Google'];\r\n\r\nfunction escapeRegexCharacters(str) {\r\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nfunction getSuggestions(value) {\r\n  if (value === \"\" || value.trim().length === 0) { return options; }\r\n\r\n  const escapedValue = escapeRegexCharacters(value.trim());\r\n  \r\n  if (escapedValue === '') {\r\n    return [];\r\n  }\r\n\r\n  const regex = new RegExp('^' + escapedValue, 'i');\r\n\r\n  return options.filter(option => regex.test(option));\r\n}\r\n\r\nfunction getSuggestionValue(suggestion) {\r\n  return suggestion;\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n  return (\r\n    <span class='suggestion'>{suggestion}</span>\r\n  );\r\n}\r\n\r\nfunction shouldRenderSuggestions(value, reason) {\r\n  return value.trim().length > 0 || reason === \"suggestions-revealed\" || reason === \"suggestions-updated\" || reason === \"render\";\r\n};\r\n\r\nexport default class CheckIn extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isChecked: false,\r\n      firstTime: false,\r\n      value: '',\r\n      suggestions: []\r\n    };\r\n    this.handleChecked = this.handleChecked.bind(this); // set this, because you need get methods from CheckBox \r\n    this.handleFirstTimeChecked = this.handleFirstTimeChecked.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSuggestionsFetchRequested = this.onSuggestionsFetchRequested.bind(this);\r\n    this.onSuggestionsClearRequested = this.onSuggestionsClearRequested.bind(this);\r\n  }\r\n\r\n  SubmitCheckIn(name, pid, reason, noPID, firstVisit, hear) {\r\n    //if form empty, don't submit\r\n    // if noPID = true, make sure name and reason are there\r\n    // if noPID = false, make sure name and PID and reason are there\r\n    if (noPID && (name === \"\" || reason === \"\")) {\r\n      alert(\"Please enter name and reason for visit\");\r\n    }\r\n    else if (!noPID && (name === \"\" || pid === \"\" || reason === \"\")) {\r\n      alert(\"Please enter name, PID, and reason for visit\");\r\n    } \r\n    else if (firstVisit && hear === \"\") {\r\n      alert(\"Please enter how you heard about the App Lab\");\r\n    } else {\r\n\r\n      var today = new Date();\r\n      var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n      var time = today.getHours() + \":\" + today.getMinutes();\r\n\r\n      const item = {\r\n        name: name, // add name input field, make blank=false\r\n        PID: pid,\r\n        date: date,\r\n        timeIn: time,\r\n        timeOut: '00:00', // leave empty\r\n        reason: reason,\r\n        staff: \"\",\r\n        checkedIn: true,\r\n        hasPID: !noPID,\r\n        firstTime: false,\r\n        heard_about_al_through: \"\"\r\n      };\r\n\r\n      // need to figure out how to send authorization token in http requests \r\n      //axios.post('/api/checkins/', item);\r\n\r\n      axios({ method: 'POST', url: '/api/checkins/', headers: {authorization: localStorage.token}, data: { \r\n        name: name,\r\n        PID: pid,\r\n        date: date,\r\n        timeIn: time,\r\n        timeOut: '00:00',\r\n        reason: reason,\r\n        staff: \"\",\r\n        checkedIn: true,\r\n        hasPID: !noPID,\r\n        firstTime: firstVisit,\r\n        heard_about_al_through: hear\r\n      } });\r\n\r\n      // navigate back to home\r\n      this.props.history.push('');\r\n    }\r\n  }\r\n\r\n  handleChecked() {\r\n    this.setState({isChecked: !this.state.isChecked});\r\n  }\r\n\r\n  handleFirstTimeChecked() {\r\n    this.setState({firstTime: !this.state.firstTime});\r\n  }\r\n\r\n  onChange = (event, { newValue, method }) => {\r\n    this.setState({\r\n      value: newValue\r\n    });\r\n  };\r\n  \r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    this.setState({\r\n      suggestions: getSuggestions(value)\r\n    });\r\n  };\r\n\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: []\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n    const inputProps = {\r\n      value,\r\n      onChange: this.onChange\r\n    };\r\n    return (\r\n      <div class=\"checkin\">\r\n        <h2>Check In</h2>\r\n        <form onSubmit={() => { this.SubmitCheckIn(document.getElementById(\"name\").value, document.getElementById(\"pid\").value, document.getElementById(\"reason\").value, document.getElementById(\"noPID\").checked, document.getElementById(\"firstTime\").checked, this.state.value) }}>\r\n          <div class=\"textbox\">\r\n            <label>\r\n              Name:\r\n                  <input type=\"text\" name=\"name\" id=\"name\" />\r\n            </label>\r\n          </div>\r\n          <div class=\"textbox\">\r\n            <label>\r\n              PID:\r\n                  <input type=\"text\" name=\"pid\" id=\"pid\" disabled={this.state.isChecked} />\r\n            </label><br></br>\r\n            <input type=\"checkbox\" id=\"noPID\" class=\"noPID\" onChange = {this.handleChecked}/>\r\n            <label id=\"noPIDLabel\" for=\"noPID\"> Check if you are a non-UNC student or do not have a PID</label>\r\n            {/* <p>(Scanner can be used to input PID)</p> */}\r\n          </div>\r\n          <div class=\"textbox\">\r\n            <label>\r\n              Reason:\r\n                  <input type=\"text\" name=\"reason\" id=\"reason\" />\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <input type=\"checkbox\" id=\"firstTime\" class=\"firstTime\" onChange = {this.handleFirstTimeChecked}/>\r\n            <label id=\"firstTimeLabel\" for=\"firstTime\"> Check if you are visiting the App Lab for the first time</label>\r\n          </div>\r\n          <div class=\"textbox\" style={{display: this.state.firstTime ? 'block' : 'none' }}>\r\n            <label>\r\n              How did you hear about us?\r\n            </label><br></br>\r\n            <Autosuggest\r\n              name=\"hear\"\r\n              id=\"hear\"\r\n              suggestions={suggestions}\r\n              onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n              onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n              getSuggestionValue={getSuggestionValue}\r\n              renderSuggestion={renderSuggestion}\r\n              shouldRenderSuggestions={shouldRenderSuggestions}\r\n              inputProps={inputProps}  />\r\n          </div>\r\n          <button class=\"check-in\">Submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// shouldRenderSuggestions={(v,r) => v.trim().length > 0 || r == 'suggestions-revealed'}","import React from 'react';\r\nimport axios from \"axios\";\r\nimport '../App.css';\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\r\n\r\n\r\nexport default class CheckOut extends React.Component {\r\n\r\n    state = { visitors: [] };\r\n\r\n    getVisitors() {\r\n        axios.get('/api/checkins/')\r\n            .then(res => {\r\n                let arr = res.data.filter(elem => elem.checkedIn === true)\r\n                this.setState({ visitors: arr });\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getVisitors();\r\n    }\r\n\r\n    submit = (obj) => {\r\n        confirmAlert({\r\n            customUI: ({ onClose }) => {\r\n              return (\r\n                <div className='custom-ui' class=\"dialogdiv\">\r\n                  <h1>Are you sure you want to check out?</h1>\r\n                  <button class=\"dialog\" onClick={() => {this.checkOut(obj); onClose();}}>\r\n                    Yes\r\n                  </button>\r\n                  <button class=\"dialog\" onClick={onClose}>No</button>\r\n                </div>\r\n              );\r\n            }\r\n          });\r\n      };\r\n\r\n    checkOut(obj) {\r\n        \r\n        // if clicked => mark checkedIn as false and set timeOut to current time\r\n        var today = new Date();\r\n        var time = today.getHours() + \":\" + today.getMinutes();\r\n\r\n        const item = {\r\n            name: obj.name,\r\n            PID: obj.PID,\r\n            date: obj.date,\r\n            timeIn: obj.timeIn,\r\n            timeOut: time,\r\n            reason: obj.reason,\r\n            checkedIn: false,\r\n            staff: obj.staff\r\n        };\r\n\r\n        //axios.put(`/api/checkins/${obj.id}/`, item)\r\n        axios({ method: 'PUT', url: `/api/checkins/${obj.id}/`, headers: {authorization: localStorage.token}, data: { \r\n            name: obj.name,\r\n            PID: obj.PID,\r\n            date: obj.date,\r\n            timeIn: obj.timeIn,\r\n            timeOut: time,\r\n            reason: obj.reason,\r\n            checkedIn: false,\r\n            staff: obj.staff\r\n          } });\r\n\r\n        // navigate back to home\r\n        this.props.history.push('');\r\n    }\r\n\r\n    render() {\r\n        let { visitors } = this.state;\r\n\r\n        return (\r\n            <div class=\"checkout\">\r\n                <h2>Check Out</h2>\r\n                <p>Select your name to check out</p>\r\n                <div class=\"grid\">\r\n                    <section class=\"grid\">\r\n                        {visitors.map((data, index) => (\r\n                            <button class=\"gridEl\" key={index} onClick={() => this.submit(data)}>\r\n                                <p>{data.name}</p>\r\n                                <p>{data.PID}</p>\r\n                            </button>\r\n                        ))} \r\n                    </section>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport '../App.css';\r\n\r\n \r\nimport { NavLink } from 'react-router-dom';\r\n \r\nconst Navigation = () => {\r\n    return (\r\n       <div>\r\n          <NavLink to=\"/\">Home</NavLink>\r\n       </div>\r\n    );\r\n}\r\n \r\nexport default Navigation;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Home from './Screens/Home';\r\nimport CheckIn from './Screens/CheckIn';\r\nimport CheckOut from './Screens/CheckOut';\r\nimport Navigation from './Screens/Navigation';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (      \r\n       <BrowserRouter>\r\n        <div>\r\n          <Navigation />\r\n            <Switch>\r\n             <Route path=\"/\" component={Home} exact/>\r\n             <Route path=\"/check-in\" component={CheckIn}/>\r\n             <Route path=\"/check-out\" component={CheckOut}/>\r\n           </Switch>\r\n        </div> \r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n \r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}