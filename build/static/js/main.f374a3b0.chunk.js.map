{"version":3,"sources":["AppLab.png","Screens/Home.js","Screens/CheckIn.js","Screens/CheckOut.js","Screens/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","home","class","src","logo","className","alt","to","type","CheckIn","name","pid","reason","today","Date","item","PID","date","getFullYear","getMonth","getDate","timeIn","getHours","getMinutes","timeOut","checkedIn","staff","axios","post","this","props","history","push","id","value","onClick","SubmitCheckIn","document","getElementById","React","Component","CheckOut","state","visitors","submit","obj","confirmAlert","customUI","onClose","checkOut","get","then","res","arr","data","filter","elem","setState","getVisitors","time","put","map","index","key","Navigation","App","path","component","Home","exact","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f374a3b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AppLab.55f63b92.png\";","import React from 'react';\r\nimport logo from '../AppLab.png';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\n\r\n\r\n\r\n\r\nconst home = () => {\r\n    return (\r\n        <div>\r\n            <div class=\"row\">\r\n                <div class=\"column\">\r\n                    <h1>  Welcome to the</h1>\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                </div>\r\n                <div class=\"column\">\r\n                    <NavLink to=\"/check-in\">\r\n                        <button type=\"button\" class=\"home\">\r\n                            Check In\r\n                        </button>\r\n                    </NavLink>\r\n                    <br></br>\r\n                    <NavLink to=\"/check-out\">\r\n                    <button type=\"button\" class=\"home\">\r\n                            Check Out\r\n                        </button>\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default home;","import React from 'react';\r\nimport axios from \"axios\";\r\nimport '../App.css';\r\n\r\nexport default class CheckIn extends React.Component {\r\n\r\n  SubmitCheckIn(name, pid, reason) {\r\n    var today = new Date();\r\n    var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n    var time = today.getHours() + \":\" + today.getMinutes();\r\n  \r\n    const item = {\r\n      name: name, // add name input field, make blank=false\r\n      PID: pid,\r\n      date: date,\r\n      timeIn: time,\r\n      timeOut: '00:00', // leave empty\r\n      reason: reason,\r\n      checkedIn: true,\r\n      staff: \"\"\r\n    };\r\n  \r\n    // add asterisk to anything required\r\n  \r\n    axios.post('http://127.0.0.1:8000/api/checkins/', item)\r\n    //axios.post('https://app-lab-check-in.herokuapp.com/api/checkins/', item)\r\n  \r\n    // navigate back to home\r\n    this.props.history.push('');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"checkin\">\r\n        <h2>Check In</h2>\r\n        <form>\r\n          <div class=\"textbox\">\r\n            <label>\r\n              Name:\r\n                  <input type=\"text\" name=\"name\" id=\"name\" />\r\n            </label>\r\n          </div>\r\n          <div class=\"textbox\">\r\n            <label>\r\n              PID:\r\n                  <input type=\"text\" name=\"pid\" id=\"pid\" />\r\n            </label>\r\n            <p>(Scanner can be used to input PID)</p>\r\n          </div>\r\n          <div class=\"textbox\">\r\n            <label>\r\n              Reason:\r\n                  <input type=\"text\" name=\"reason\" id=\"reason\" />\r\n            </label>\r\n          </div>\r\n          <input class=\"submit\" type=\"submit\" value=\"Submit\"\r\n            onClick={() => { this.SubmitCheckIn(document.getElementById(\"name\").value, document.getElementById(\"pid\").value, document.getElementById(\"reason\").value) }} />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport axios from \"axios\";\r\nimport '../App.css';\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\r\n\r\n\r\nexport default class CheckOut extends React.Component {\r\n\r\n    state = { visitors: [] };\r\n\r\n    getVisitors() {\r\n        axios.get('http://127.0.0.1:8000/api/checkins/')\r\n        //axios.get('https://app-lab-check-in.herokuapp.com/api/checkins/')\r\n            .then(res => {\r\n                let arr = res.data.filter(elem => elem.checkedIn === true)\r\n                this.setState({ visitors: arr });\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getVisitors();\r\n    }\r\n\r\n\r\n    submit = (obj) => {\r\n        confirmAlert({\r\n            customUI: ({ onClose }) => {\r\n              return (\r\n                <div className='custom-ui' class=\"dialogdiv\">\r\n                  <h1>Are you sure you want to check out?</h1>\r\n                  <button class=\"dialog\" onClick={() => {this.checkOut(obj); onClose();}}>\r\n                    Yes\r\n                  </button>\r\n                  <button class=\"dialog\" onClick={onClose}>No</button>\r\n                </div>\r\n              );\r\n            }\r\n          });\r\n      };\r\n\r\n    checkOut(obj) {\r\n        \r\n        // if clicked => mark checkedIn as false and set timeOut to current time\r\n        var today = new Date();\r\n        var time = today.getHours() + \":\" + today.getMinutes();\r\n\r\n        const item = {\r\n            name: obj.name,\r\n            PID: obj.PID,\r\n            date: obj.date,\r\n            timeIn: obj.timeIn,\r\n            timeOut: time,\r\n            reason: obj.reason,\r\n            checkedIn: false,\r\n            staff: obj.staff\r\n        };\r\n\r\n        axios.put(`http://127.0.0.1:8000/api/checkins/${obj.id}/`, item)\r\n        //axios.put(`https://app-lab-check-in.herokuapp.com/${obj.id}/`, item)\r\n\r\n        // navigate back to home\r\n        this.props.history.push('');\r\n    }\r\n\r\n    render() {\r\n        let { visitors } = this.state;\r\n\r\n        return (\r\n            <div class=\"checkout\">\r\n                <h2>Check Out</h2>\r\n                <p>Select your name to check out</p>\r\n                <div>\r\n                    <section>\r\n                        {visitors.map((data, index) => (\r\n                            <button key={index} onClick={() => this.submit(data)}>\r\n                                <p>{data.name}</p>\r\n                                <p>{data.PID}</p>\r\n                            </button>\r\n                        ))}\r\n                    </section>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport '../App.css';\r\n\r\n \r\nimport { NavLink } from 'react-router-dom';\r\n \r\nconst Navigation = () => {\r\n    return (\r\n       <div>\r\n          <NavLink to=\"/\">Home</NavLink>\r\n       </div>\r\n    );\r\n}\r\n \r\nexport default Navigation;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Home from './Screens/Home';\r\nimport CheckIn from './Screens/CheckIn';\r\nimport CheckOut from './Screens/CheckOut';\r\nimport Navigation from './Screens/Navigation';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (      \r\n       <BrowserRouter>\r\n        <div>\r\n          <Navigation />\r\n            <Switch>\r\n             <Route path=\"/\" component={Home} exact/>\r\n             <Route path=\"/check-in\" component={CheckIn}/>\r\n             <Route path=\"/check-out\" component={CheckOut}/>\r\n           </Switch>\r\n        </div> \r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n \r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}